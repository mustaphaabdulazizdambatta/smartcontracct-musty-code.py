const ethers = require("ethers");
const fs = require("fs-extra")
require("dotenv").config();
async function main() {
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
    // const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const encryptedJsonKey = fs.readFileSync("./encryptedKey.json", "utf8")
    let wallet = new ethers.Wallet.fromEncryptedJsonSync(encryptedJsonKey, process.env.PRIVATE_KEY_PASSWORD);
    wallet = await wallet.connect(provider);
    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
    const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf8");

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    console.log("Deploying please wait....");
    const contract = await contractFactory.deploy();
   await contract.deployTransaction.wait(1);
   console.log(`contract address ${contract.address}`);
   const currentFavoriteNumber = await contract.retrieve();
   console.log(`Current FavoriteNumber: ${currentFavoriteNumber.toString()}`);
   const transactionResponse = await contract.store("7");
   const transactionReceipt = await transactionResponse.wait(1);
   const updatedFavoriteNumber = await contract.retrieve();
   console.log(`updatedFavoriteNumber:${updatedFavoriteNumber}`)
    // console.log("let's deploy with only transaction data....");
    // const nonce = await wallet.getTransactionCount();

    // const tx = {
    //     nonce: nonce,
    //     gasPrice: 20000000000,
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: "0x608060405234801561001057600080fd5b506103dc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c578063471f7cdf1461007a5780634f2be91f146100985780636057361d146100b65780639e7a13ad146100d2575b600080fd5b610064610103565b6040516100719190610274565b60405180910390f35b61008261010c565b60405161008f9190610274565b60405180910390f35b6100a0610112565b6040516100ad9190610274565b60405180910390f35b6100d060048036038101906100cb91906101ff565b61011b565b005b6100ec60048036038101906100e791906101ff565b61012e565b6040516100fa92919061028f565b60405180910390f35b60008054905090565b60005481565b60006002905090565b8060008190555061012a610103565b5050565b6001818154811061013e57600080fd5b906000526020600020906002020160009150905080600001549080600101805461016790610318565b80601f016020809104026020016040519081016040528092919081815260200182805461019390610318565b80156101e05780601f106101b5576101008083540402835291602001916101e0565b820191906000526020600020905b8154815290600101906020018083116101c357829003601f168201915b5050505050905082565b6000813590506101f98161038f565b92915050565b60006020828403121561021557610214610379565b5b6000610223848285016101ea565b91505092915050565b6000610237826102bf565b61024181856102ca565b93506102518185602086016102e5565b61025a8161037e565b840191505092915050565b61026e816102db565b82525050565b60006020820190506102896000830184610265565b92915050565b60006040820190506102a46000830185610265565b81810360208301526102b6818461022c565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b838110156103035780820151818401526020810190506102e8565b83811115610312576000848401525b50505050565b6000600282049050600182168061033057607f821691505b602082108114156103445761034361034a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b610398816102db565b81146103a357600080fd5b5056fea264697066735822122063580bf309b088cd5b59d0ab1524683a7bcc5025b892efefb9393e0ba0b3037e64736f6c63430008070033",
    //     chainId: 1337,
    // };

    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse);
}

main()
    .then(() => process.exit(0))
    .catch((error => {
        console.log(error);
        process.exit(1);
    }))